$NetBSD: patch-cd,v 1.1 2011/01/10 11:55:18 markd Exp $

--- libs/ksysguard/processcore/processes_freebsd_p.cpp.orig	2010-02-20 11:31:44.000000000 +0000
+++ libs/ksysguard/processcore/processes_freebsd_p.cpp
@@ -29,10 +29,6 @@
 #include <sys/types.h>
 #include <sys/user.h>
 #include <sys/resource.h>
-#if defined(__DragonFly__)
-#include <sys/resourcevar.h>
-#include <err.h>
-#endif
 #include <signal.h>
 #include <unistd.h>
 #include <stdlib.h>
@@ -77,53 +73,25 @@ void ProcessesLocal::Private::readProcSt
     process->setGid(0);
     process->setTracerpid(0);
 
-
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
     process->setEuid(p->ki_uid);
     process->setUid(p->ki_ruid);
     process->setEgid(p->ki_svgid);
     process->setGid(p->ki_rgid);
     process->setName(QString(p->ki_comm ? p->ki_comm : "????"));
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-    process->setUid(p->kp_uid);
-    process->setGid(p->kp_pgid);
-    process->setName(QString(p->kp_comm ? p->kp_comm : "????"));
-#else
-    process->setUid(p->kp_eproc.e_ucred.cr_uid);
-    process->setGid(p->kp_eproc.e_pgid);
-#endif
 }
 
 void ProcessesLocal::Private::readProcStat(struct kinfo_proc *p, Process *ps)
 {
     int status;
     struct rusage pru;
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+
         ps->setUserTime(p->ki_rusage.ru_utime.tv_sec * 100 + p->ki_rusage.ru_utime.tv_usec / 10000);
         ps->setSysTime(p->ki_rusage.ru_stime.tv_sec * 100 + p->ki_rusage.ru_stime.tv_usec / 10000);
         ps->setNiceLevel(p->ki_nice);
         ps->setVmSize(p->ki_size / 1024);
         ps->setVmRSS(p->ki_rssize * getpagesize() / 1024);
         status = p->ki_stat;
-#elif defined(__DragonFly__)
-#if __DragonFly_version >= 190000
-        if (!getrusage(p->kp_pid, &pru)) {
-            errx(1, "failed to get rusage info");
-        }
-        ps->setUserTime(pru.ru_utime.tv_usec / 1000); /*p_runtime / 1000*/
-        ps->setNiceLevel(p->kp_nice);
-        ps->setVmSize(p->kp_vm_map_size);
-        ps->setVmRSS(p->kp_vm_rssize * getpagesize());
-        status = p->kp_stat;
-#else
-        ps->setUserTime(p->kp_proc.p_rtime.tv_sec*100+p->kp_proc.p_rtime.tv_usec/100);
-        ps->setNiceLevel(p->kp_proc.p_nice);
-        ps->setVmSize(p->kp_eproc.e_vm.vm_map.size);
-        ps->setVmRSS(p->kp_eproc.e_vm.vm_rssize * getpagesize());
-        status = p->kp_proc.p_stat;
-#endif
         ps->setSysTime(0);
-#endif
 
 // "idle","run","sleep","stop","zombie"
     switch( status ) {
@@ -185,13 +153,7 @@ long ProcessesLocal::getParentPid(long p
     struct kinfo_proc p;
     if(d->readProc(pid, &p))
     {
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
         ppid = p.ki_ppid;
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-        ppid = p.kp_ppid;
-#else
-        ppid = p.kp_eproc.e_ppid;
-#endif
     }
     return ppid;
 }
@@ -230,16 +192,9 @@ QSet<long> ProcessesLocal::getAllPids( )
 
     for (num = 0; num < len / sizeof(struct kinfo_proc); num++)
     {
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
         long pid = p[num].ki_pid;
         long long ppid = p[num].ki_ppid;
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-        long pid = p[num].kp_pid;
-        long long ppid = p[num].kp_ppid;
-#else
-        long pid = p[num].kp_proc.p_pid;
-        long long ppid = p[num].kp_eproc.e_ppid;
-#endif
+
         //skip all process with parent id = 0 but init
         if(ppid == 0 && pid != 1)
             continue;
